// https://thesharanmohanblog.wordpress.com/2018/09/12/intro-to-fpgas-fibonacci-sequence/

module memory(clk, rst, fibout);
input clk;
input rst;
output [7:0] fibout;

reg[8:0] address;
reg[7:0] dataIn;
wire[7:0] dataOut;
reg wrEnable;

reg[7:0] regFibOut;
assign fibout = regFibOut;

alta_ram4k gabosram(
  .Clk0(clk),
  .Clk1(~1'b0),
  .ClkEn0(1'b1),
  .ClkEn1(~1'b0),
  .AsyncReset0(1'b0),
  .AsyncReset1(~1'b0),
  .AddressA(address),
  .DataInA(dataIn),
  .WeRenA(1'b0),
  .ByteEnA(),
  .AddressB(),
  .DataInB(),
  .WeRenB(~1'b0),
  .ByteEnB(),
  .DataOutA(dataOut),
  .DataOutB()
);
defparam gabosram.CLKMODE = "read_write";
defparam gabosram.DATA_WIDTH_A = 8;
defparam gabosram.ADDR_WIDTH_A = 9;
defparam gabosram.BYTE_WIDTH_A = 0;
defparam gabosram.PORTA_WRITEMODE = "normal";
defparam gabosram.PORTA_OUTREG = "no";
defparam gabosram.INIT_PORT = "a";
defparam gabosram.INIT_VAL = 4096'h


always @(posedge clk or posedge rst)
begin
  if (rst == 1'b1)
  begin
    address <= 10'b0000000000;
  end
  else if (clk == 1'b1)
  begin
    regFibOut <= dataOut;
    address <= address + 1;
  end
end

endmodule
